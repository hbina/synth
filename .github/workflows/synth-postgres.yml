name: synth-postgres

on:
  push:
    branches: [master]
    paths: ["**/*.rs", "synth/testing_harness/postgres/**"]
  pull_request:
    branches: [master]
    paths: ["**/*.rs", "synth/testing_harness/postgres/**"]

  workflow_dispatch:

env:
  RUSTFLAGS: "-D warnings"

jobs:
  e2e_tests_postgres:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          -p 5432:5432
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends postgresql-client jq
      - run: |
          psql -f synth/testing_harness/postgres/0_hospital_schema.sql postgres://postgres:postgres@localhost:5432/postgres
          psql -f synth/testing_harness/postgres/1_hospital_data.sql postgres://postgres:postgres@localhost:5432/postgres
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
      - run: cargo +nightly install --debug --path=synth
      - run: |
          echo "Running generate test"
          cd synth/testing_harness/postgres
          synth generate hospital_master | jq > hospital_data_generated.json
          diff hospital_data_generated.json hospital_data_generated_master.json || exit 1
      - run: |
          echo "Testing import"
          cd synth/testing_harness/postgres
          synth init || true
          synth import --from postgres://postgres:postgres@localhost:5432/postgres hospital_import
          diff <(jq --sort-keys . hospital_import/*) <(jq --sort-keys . hospital_master/*)
      - run: |
          psql -f synth/testing_harness/postgres/warnings/0_warnings.sql postgres://postgres:postgres@localhost:5432/postgres
          cd synth/testing_harness/postgres
          WARNINGS=$(synth generate --size 10 --to postgres://postgres:postgres@localhost:5432/postgres warnings 2>&1)
          if [[ "$WARNINGS" == *"warnings.int32"* && "$WARNINGS" == *"warnings.int64"* ]]
          then
            echo "expected warnings were emitted"
          else
            echo "expected"
            echo "[yyyy-mm-ddThh:MM:ssZ WARN synth::datasource::relational_datasource] Trying to put an unsigned u32 into a int4 typed column warnings.int32"
            echo "[yyyy-mm-ddThh:MM:ssZ WARN synth::datasource::relational_datasource] Trying to put an unsigned u64 into a int8 typed column warnings.int64"
            echo "got"
            echo $WARNINGS
            exit 1
          fi
